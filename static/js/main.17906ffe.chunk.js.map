{"version":3,"sources":["components/PageNavLink/PageNavLink.tsx","components/Loader/Loader.tsx","api.ts","components/PersonLink/PersonLink.tsx","components/PeopleBlock/PeopleBlock.tsx","App.tsx","index.tsx"],"names":["PageNavLink","to","text","className","isActive","classNames","Loader","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","PersonLink","people","personName","person","find","human","name","slug","sex","Erorr","PeopleTable","useState","visiblePeople","setVisiblePeople","load","setLoad","NO","erorr","setErorr","useParams","loadPeople","catch","SERVER","length","NOPEOPLE","useEffect","map","born","died","motherName","fatherName","App","role","path","element","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.17906ffe.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\n\ntype PageNavLinkProps = {\n  to:string;\n  text:string;\n};\n\nexport const PageNavLink: React.FC<PageNavLinkProps> = ({ to, text }) => {\n  return (\n    <NavLink\n      to={to}\n      className={({ isActive }) => classNames(\n        'navbar-item',\n        { 'has-background-grey-lighter': isActive },\n      )}\n    >\n      {text}\n    </NavLink>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { FC } from 'react';\nimport classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\nimport { Person } from '../../types';\n\ntype PersonLinkProps = {\n  people:Person[];\n  personName:string | null;\n};\n\nexport const PersonLink: FC<PersonLinkProps> = ({ people, personName }) => {\n  const person = people.find(human => human.name === personName);\n\n  if (!personName) {\n    return (<td>-</td>);\n  }\n\n  if (person) {\n    return (\n      <td>\n        <NavLink\n          to={`../${person.slug}`}\n          className={classNames({ 'has-text-danger': person.sex === 'f' })}\n        >\n          {person.name}\n        </NavLink>\n      </td>\n    );\n  }\n\n  return (<td>{personName}</td>);\n};\n","import { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Link, useParams } from 'react-router-dom';\nimport { Loader } from '../Loader';\nimport { getPeople } from '../../api';\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink/PersonLink';\n\nenum Erorr {\n  NO,\n  SERVER,\n  NOPEOPLE,\n}\n\nexport const PeopleTable = () => {\n  const [visiblePeople, setVisiblePeople] = useState<Person[]>([]);\n  const [load, setLoad] = useState(false);\n  const [erorr, setErorr] = useState<Erorr>(Erorr.NO);\n  const { slug = '' } = useParams();\n\n  const loadPeople = async () => {\n    setLoad(true);\n\n    const people = await getPeople().catch(() => setErorr(Erorr.SERVER));\n\n    if (people) {\n      if (people.length === 0) {\n        setErorr(Erorr.NOPEOPLE);\n      }\n\n      setVisiblePeople(people);\n    }\n\n    setLoad(false);\n  };\n\n  useEffect(() => {\n    loadPeople();\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {load && <Loader />}\n\n          {erorr === Erorr.SERVER && (\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              Something went wrong\n            </p>\n          )}\n\n          {erorr === Erorr.NOPEOPLE && (\n            <p data-cy=\"noPeopleMessage\">\n              There are no people on the server\n            </p>\n          )}\n\n          <table\n            data-cy=\"peopleTable\"\n            className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n          >\n            {visiblePeople.length > 0 && (\n              <>\n                <thead>\n                  <tr>\n                    <th>Name</th>\n                    <th>Sex</th>\n                    <th>Born</th>\n                    <th>Died</th>\n                    <th>Mother</th>\n                    <th>Father</th>\n                  </tr>\n                </thead>\n\n                <tbody>\n                  {visiblePeople.map(people => (\n                    <tr\n                      data-cy=\"person\"\n                      className={classNames(\n                        { 'has-background-warning': slug === people.slug },\n                      )}\n                    >\n                      <td>\n                        <Link\n                          to={`../${people.slug}`}\n                          className={classNames(\n                            { 'has-text-danger': people.sex === 'f' },\n                          )}\n                        >\n                          {people.name}\n                        </Link>\n                      </td>\n\n                      <td>{people.sex}</td>\n                      <td>{people.born}</td>\n                      <td>{people.died}</td>\n                      <PersonLink\n                        people={visiblePeople}\n                        personName={people.motherName}\n                      />\n                      <PersonLink\n                        people={visiblePeople}\n                        personName={people.fatherName}\n                      />\n                    </tr>\n                  ))}\n                </tbody>\n              </>\n            )}\n          </table>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Route, Routes } from 'react-router-dom';\n\nimport './App.scss';\nimport { PageNavLink } from './components/PageNavLink/PageNavLink';\nimport { PeopleTable } from './components/PeopleBlock/PeopleBlock';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <PageNavLink to=\"/\" text=\"Home\" />\n          <PageNavLink to=\"/people\" text=\"People\" />\n        </div>\n      </div>\n    </nav>\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Routes>\n          <Route\n            path=\"*\"\n            element={<h1 className=\"title\">Page not found</h1>}\n          />\n          <Route\n            path=\"/\"\n            element={<h1 className=\"title\">Home Page</h1>}\n          />\n          <Route path=\"people\">\n            <Route\n              index\n              element={<PeopleTable />}\n            />\n            <Route\n              path=\":slug\"\n              element={<PeopleTable />}\n            />\n          </Route>\n        </Routes>\n      </div>\n    </main>\n  </div>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <HashRouter>\n      <App />\n    </HashRouter>,\n  );\n"],"sourceRoot":""}